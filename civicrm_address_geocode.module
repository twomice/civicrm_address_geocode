<?php

define('FIELD_NAME', 'field_geo_code_1');
define('AREAS', 7);
define('AREA_TABLE', 'civicrm_value_membership_profile_2');
define('AREA_COLUMN', 'areas_of_practice_7');

/*Eliot additions */
define('PROFILE NAME', 'directory_name_13');



/*
 * Implement hook_enable()
 */
function civicrm_address_geocode_enable() {
  civicrm_initialize();
  /**
   * Create a geofield.
   */
  $field = array(
    'field_name' => FIELD_NAME,
    'type' => 'geofield',
  );
  field_create_field($field);

  /**
   * Bind field to a entity bundle.
   */
  $instance = array(
    'label' => 'Geo Code',
    'field_name' => $field['field_name'],
    'entity_type' => 'civicrm_address',
    'bundle' => 'civicrm_address',
    'widget' => array(
      'type' => 'geocoder',
    ), 
  );
  field_create_instance($instance);

  $params = array(
    'geocode' => 1,
    'parse' => 0, // Set this to 1 if you want to parse addresses.
    'throttle' => 1,
  );
  $gc = new CRM_Utils_Address_BatchUpdate($params);
  $result = $gc->run();
  if ($result['is_error'] == 1) {
    drupal_set_message(t($result['messages']), 'error');
  }
}

/**
 * Implements hook_disable().
 *
 * Remove field from civicrm_address bundle and then delete the field.
 */
function civicrm_address_geocode_disable() {
  $instance = array(
    'label' => 'Geo Code',
    'field_name' => FIELD_NAME,
    'entity_type' => 'civicrm_address',
    'bundle' => 'civicrm_address',
  );
  field_delete_instance($instance);
  field_delete_field($instance['field_name']);
  print 'Removed ' . $instance['label'] . "\n";
}

/*
 * Implement hook_form_alter()
 */
function civicrm_address_geocode_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'civicrm_address_form' && isset($form[FIELD_NAME])) {
    $form[FIELD_NAME]['#disabled'] = TRUE;
    return $form;
  }
}

/*
 * Implement hook_civicrm_post()
 */
function civicrm_address_geocode_civicrm_post($op, $objectName, $objectId, &$objectRef) {
  if ($objectName == 'Address') {
    updateGeoCode($objectRef);
  }
}

function updateGeoCode($address) {
  if (is_array($address)) {
    $geo_code_1 = $address['geo_code_1'];
    $geo_code_2 = $address['geo_code_2'];
    $id = $address['id'];
  }
  else {
    $geo_code_1 = $address->geo_code_1;
    $geo_code_2 = $address->geo_code_2;
    $id = $address->id;
  }
  
  if (
    !empty($geo_code_1)
    && !empty($geo_code_2)
    && is_numeric($geo_code_1)
    && is_numeric($geo_code_2)
  ) {
    $geofield = makePoint($geo_code_1, $geo_code_2);
    savePoint($id, $geofield);
  }
}

function makePoint($lat, $lon) {
  return array(
    'geom' => "POINT ($lon $lat)",
    'geo_type' => 'point',
    'lat' => $lat . "000000",
    'lon' => $lon . "000000",
    'left' => $lon . "000000",
    'top' => $lat . "000000",
    'right' => $lon . "000000",
    'bottom' => $lat . "000000"
  );
}

function savePoint($id, $geofield) {
  $name = FIELD_NAME;
  $entity = entity_load_single('civicrm_address', $id);
  $entity->{$name}[LANGUAGE_NONE][0] = $geofield;
  field_attach_update('civicrm_address', $entity);
}

function civicrm_address_geocode_views_query_alter(&$view, &$query) {
 if (($view->name == 'testgeo') || ($view->name == 'mediator_proximity_search')) {

    // Adding join for last name
    $join = new views_join();
    $join->table = 'civicrm_contact';
    $join->field = 'id';
    $join->left_table = 'civicrm_address';
    $join->left_field = 'contact_id';
    $join->type = 'LEFT';
    $query->add_relationship('civicrm_contact', $join, 'civicrm_address');
    // Adding join for areas of practice
    $join = new views_join();
    $join->table = AREA_TABLE;
    $join->field = 'entity_id';
    $join->left_table = 'civicrm_address';
    $join->left_field = 'contact_id';
    $join->type = 'LEFT';
    $query->add_relationship(AREA_TABLE, $join, 'civicrm_address');
    // Adding join for membership type
    $join = new views_join();
    $join->table = 'civicrm_membership';
    $join->field = 'contact_id';
    $join->left_table = 'civicrm_address';
    $join->left_field = 'contact_id';
    $join->type = 'LEFT';
    $query->add_relationship('civicrm_membership', $join, 'civicrm_address');
    // Add State_Province (added by Eliot ) 
    $join = new views_join();
    $join->table = 'civicrm_state_province';
    $join->field = 'id';
    $join->left_table = 'civicrm_address';
    $join->left_field = 'state_province_id';
    $join->type = 'LEFT';
    $query->add_relationship('civicrm_state_province',$join,'civicrm_address');
     // Add Membership Custom Data (added by Eliot ) 
    $join = new views_join();
    $join->table = 'civicrm_value_membership_display_preferences_8';
    $join->field = 'entity_id';
    $join->left_table = 'civicrm_membership';
    $join->left_field = 'id';
    $join->type = 'LEFT';
    $query->add_relationship('civicrm_value_membership_display_preferences_8',$join,'civicrm_membership');
    
    // Add where for membership type
    //membership types 2=Premium, 3=Premium Lifetime, 5=Premium Certified
    //membership status 1=New, 2=Current, 3=Grace
    //location type = 2=work, 6=Work#2
    $query->add_where(1,'civicrm_membership.membership_type_id', array(2,3,5), 'IN');
    $query->add_where(1,'civicrm_membership.status_id', array(1,2,3), 'IN');
    $query->add_where(1,'civicrm_address.location_type_id',array(2,6), 'IN');
    $query->add_where(1,'civicrm_value_membership_display_preferences_8.display_in_referral_directory__37',array(1),'IN');
  }
}

/**
 * Implements hook_views_api().
 */
function civicrm_address_geocode_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_views_data_alter().
 */
function civicrm_address_geocode_views_data_alter(&$data) {
  // Areas of practice filter
  $data['civicrm_address'][AREA_COLUMN]['title'] = 'Areas of Practice';
  $data['civicrm_address'][AREA_COLUMN]['help'] = 'Areas of Practice';
  $data['civicrm_address'][AREA_COLUMN]['filter']['handler'] = 'civicrm_address_geocode_handler_filter_practice_areas';
  // Last name filter
  $data['civicrm_address']['last_name']['title'] = 'Last Name';
  $data['civicrm_address']['last_name']['help'] = 'Last Name';
  $data['civicrm_address']['last_name']['filter']['handler'] = 'civicrm_address_geocode_handler_filter_last_name';
}